

{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "project Iron-body",
    "description": "Swagger docs for project Iron-body",
    "license": {
      "name": "MIT",
      "url": "opensource.org/licenses/MIT"
    }
 },
 
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": 
  [
    { "url": "https://iron-body-project-backend.onrender.com/api" },
   { "url": "http://localhost:3000/api" }
  
],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "UserProfile",
      "description": "User endpoints"
    },
    {
      "name": "UserParams",
      "description": "User parameters endpoints"
    },
    {
      "name": "Products",
      "description": "Products endpoints"
    },
    {
      "name": "Exercises",
      "description": "Exercises endpoints"
    },
    {
      "name": "Filters",
      "description": "Filters endpoints"
    }

  ],
  
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
      
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "User with such email already exists",
            "content": {}
          }
        }
      }
      
    },

    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentification",
        "parameters": [],
        "requestBody": {
          "description": "Authentification object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthentificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation - logout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthentificationResponse"
                }
              }
            }
          },
          "401": {
            "description": "'Unauthorized'",
            "content": {}
          }
        }
      }
     
    },
   
    "/users/current": {
      "get": {
        "tags": ["UserProfile"],
        "summary": "User's information",
        "security": [{ "Bearer": [] }],
        
        "responses": {
          "200": {
            "description": "Successful operation (redirect to front-end with accessToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "'Unauthorized'",
            "content": {}
          }
        }
      }
    },
     "/users/updateProfile": {
      "patch": {
        "tags": ["UserProfile"],
        "summary": "Update user's name or & user's avatar",
     
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "updating object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshingRequest"
              }
            }
          }
        },
        
        "responses": {
          "200": {
            "description": "User'data updated successful",
             "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshingResponse"
                }
              }
             }
          },
          "400": {
            "description": "Bad request (invalid request body)",
             "content": {}
          },
          
          "401": {
            "description": "Bearer auth failed, user unauthorized",
            "content": {}
          }
        
        }
      }
      
    },
    "/users/logout": {
      
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
       
        "security": [{ "Bearer": [] }],
       
        "responses": {
          "200": {
            "description": "Logout success"
            
          },
          "401": {
            "description": "'Unauthorized'",
            "content": {}
          }
        }
      }
    },

    "/users/calculate":{
      "post":{
        "tags": ["UserParams"],
        "summary": "Add user's parameters",
        "security": [{ "Bearer": [] }],
        "parameters": [],
      
        "requestBody": {
          "description": "User's data object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAddDataRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserParamsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          }
          
        }
      }
    },
      "/users/userData": {
      "get": {
        "tags": ["UserParams"],
        "summary": "Get user params",
        "security": [{ "Bearer": [] }],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "'Unauthorized'",
            "content": {}
          }
        }
      }
    },
    "/users/updateParamsUser":{
      "patch":{
        "tags": ["UserParams"],
        "summary": "Update user's parameters",
        "security": [{ "Bearer": [] }],
        "parameters": [],
      
        "requestBody": {
          "description": "User's data object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDataRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          }
          
        }
      }
    },

      "/products": {
      "get": {
        "tags": ["Products"],
        "summary": "all products list",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
        "/products/categories": {
      "get": {
        "tags": ["Products"],
        "summary": "all products categories list",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllCategoriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/products?": {
      "get": {
        "tags": ["Products"],
        "summary": "Products list with parameters for pagination or filtration",
        "security": [{ "Bearer": [] }],
        
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "number of page for pagination required with parameter limit",
           
            "schema": {
              "type": "number",
              "example":"1"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "quantity of points by one page, required for pagination with parameter page",
         
            "schema": {
              "type": "number",
              "example":"6"
            }
            
          },
          {
            "name": "title",
            "in": "query",
            "description": "parameter for filtration by name of product (looking by characters), works alone or with parameters 'category' or / & 'isNotAllowed'",
            "schema": {
              "type": "string",
              "example":"marl"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "parameter for filtration by category of product, works alone or with parameters 'title' or / & 'isNotAllowed'",
         
            "schema": {
              "type": "string",
            "example": "fish"
            }
          },
          {
            "name": "isNotAllowed",
            "in": "query",
            "description": "parameter for filtration by products that not alowed for users blood type, works alone or with parameters 'title' or / & 'categories'",
            "schema": {
              "type": "boolean",
            "example": "false"
        
            }
          }
          
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
 
      "/exercises": {
      "post": {
        "tags": ["Exercises"],
        "summary": "User add info about exercise by date",
         "security": [{ "Bearer": [] }],
        "parameters": [],
      
        "requestBody": {
          "description": "User exercise info object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User'sExerciseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User'sExerciseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
     "/exercises/byDate?date": {
      "get": {
        "tags": ["Exercises"],
        "summary": "Exercises list",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "exercise's date",
            "required": true,
            "schema": {
              "type": "string"
           
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExercisesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/exercises/del": {
      "delete": {
        "tags": ["Exercises"],
        "summary": "Delete exercise by id & date",
        "security": [{ "Bearer": [] }],
        "parameters": [],
         "requestBody": {
          "description": "deleting exercise info object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User'sDelExerciseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exercise successful deleted",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/exercises/{exerciseId}": {
      "patch": {
        "tags": ["Exercises"],
        "summary": "User update info about exercise by date",
         "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "exerciseId",
            "in": "path",
            "description": "exercise's id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6512b57892792387ef9e1035"
            }
          }
        ],
        "requestBody": {
          "description": "Exercise upadating object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateExerciseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The exercise with id was successfully updated"
           
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
      "/filters": {
      "get": {
        "tags": ["Filters"],
        "summary": "Get all filters",
        "security": [{ "Bearer": [] }],
        
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllFiltersResponse"
                }
              }
            }
          },
          "401": {
            "description": "'Unauthorized'",
            "content": {}
          }
        }
      }
    },
      "/filters/filtered": {
      "get": {
        "tags": ["Filters"],
        "summary": "Filtered list",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "category of filter",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Equipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFilteredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    }
  },
  
  
  "components": {

    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty1"
          }
        }
      },
      
      "RegistrationResponse": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name"
            },
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email"
            },

              "accessToken": {
              "type": "string",
              "description": "User's accessToken"
            },
             "registrationDate": {
              "type": "string",
              "description": "User registration date"
            }
        
        
        },
        "example": 
          { 
  "user": {
    "name": "string",
    "email": "user@example.com"
  },
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MTQ1NzNkNTIwZmY0MWI1NmRiZGJjYiIsImlhdCI6MTY5NTgzMTg2OSwiZXhwIjoxNjk1ODc1MDY5fQ.jM9xj5OtB00vQBelTK-24PJf7ipa44x6BtyBPgKY-60",
  "registrationDate": "2023-10-02T16:38:56.706Z"
}
      },
      "AuthentificationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
         
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty1"
          }
        }
      },
      "AuthentificationResponse": {
    
          "type": "object",
          "properties": {
            "accessToken": {
              "type": "string",
              "description": "User's accessToken"
            }
        },
        "example": 
          { 
          "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MDgyMTE0YTRiMzAwNzA1NjcwYTZiYiIsImlhdCI6MTY5NTAzNDU1NiwiZXhwIjoxNjk1MDc3NzU2fQ.3buIYjrp0-laNxssk3cjPqW84LO8lxQeJm4Nr5QNewg"
         }
      },
      
      "CurrentUserDataResponse": {
    
          "type": "object",
          "properties": {
            "userId": {
              "type": "number",
              "description": "User's id",
              "example": "65129e077a2e6f57adbfeceb"
            },
            "name": {
              "type": "string",
              "description": "User's name"
           
            },
             "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
            "avatarUrl": {
              "type": "string",
              "description": "User's avatar URL"
            } 
        },
        "example": 
          { "name": "Dnipro9",
    "email": "dnipro9@mail.com",
    "avatarUrl": "//www.gravatar.com/avatar/f5b7f1ac0be48d98b46a157a22c0332f"} 
      },

      "RefreshingRequest": {
        "type": "object",
       
        "properties": {
         
          "name": {
            "type": "string",
            "description": "new User's name"
      
          },
          "user's avatar": {
            "type": "string",
            "description": "User's avatar",
            "format": "binary"
           
          }
        }
      },
      "RefreshingResponse": {
    
          "type": "object",
                "properties": {
                  "avatarUrl": {
                    "type": "string",
                    "format": "binary"
                  },
                  "name": {
                    "type": "string"
                  }
                },
        "example": 
          { 
          "name": "John Macclaud", 
          "avatarUrl": "https://bipbap.ru/wp-content/uploads/2022/11/1652235714_41-kartinkin-net-p-prikolnie-kartinki-dlya-stima-44.jpg"
         }
      },
 "UserAddDataRequest": {
        "type": "object",
        "required": ["height",
    "currentWeight",
    "desiredWeight",
   "birthday",
    "blood",
    "sex",
    "levelActivity"],
        "properties": {
         
          "height": {
            "type": "number",
            "description": "User's height",
            "minimum": 150
          },
          "currentWeight": {
            "type": "number",
            "description": "User's currentWeight",
            "minimum": 35
          },
          "desiredWeight": {
            "type": "number",
            "description": "User's desiredWeight",
            "minimum": 35
          },
          " birthday": {
            "type": "string",
            "description": "User's age",
            "format": "data",
            "maximum": 18
          },
          "blood": {
            "type": "number",
            "description": "User's blood group",
            "enum": [1, 2, 3, 4]
          },
          "sex": {
            "type": "string",
            "description": "User's sex",
            "enum": ["male","female"]
          },
          "levelActivity": {
            "type": "number",
            "description": "User's levelActivity",
            "enum": [1, 2, 3, 4, 5]
          }
        },
        "example": 
          { "height": 180, "currentWeight": 100, "desiredWeight": 90,
           "birthday": "23-12-1989", "blood": 1, "sex": "male", "levelActivity": 2 }
      },
       "UserUpdateDataRequest": {
        "type": "object",
        "properties": {
         
          "height": {
            "type": "number",
            "description": "User's height",
            "minimum": 150
          },
          "currentWeight": {
            "type": "number",
            "description": "User's currentWeight",
            "minimum": 35
          },
          "desiredWeight": {
            "type": "number",
            "description": "User's desiredWeight",
            "minimum": 35
          },
          "sex": {
            "type": "string",
            "description": "User's sex",
            "enum": ["male","female"]
          },
          "levelActivity": {
            "type": "number",
            "description": "User's levelActivity",
            "enum": [1, 2, 3, 4, 5]
          }
        },
        "example": 
          {  "currentWeight": 90, "desiredWeight": 85,"levelActivity": 1 }
      },
      
      "UserParamsResponse": {
        
          "type": "object",
          "properties": {
            "caloriesNorm": {
              "type": "number",
              "description": "calculated user's caloriesNorm"
           
            },
            "sportTimeNorm": {
              "type": "number",
              "description": "user's sportTimeNorm"
            } 
        },
        "example": 
          { "caloriesNorm": 2039, "sportTimeNorm": 100 }
      },
      "UserDataResponse":{
       
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "number",
              "description": "user data id",
              "example": "32143232436545474"
            },
             "height": {
              "type": "integer",
              "description": "user's height"
              
            },
             "currentWeight": {
              "type": "integer",
              "description": "user's currentWeight"
              
            },
            "desireWeight": {
              "type": "integer",
              "description": "user's desireWeight"
            },
            " birthday": {
            "type": "string",
            "description": "User's birthday",
            "format": "data"
          
          },
          "blood": {
            "type": "integer",
            "description": "User's blood group"
         
          },
          "sex": {
            "type": "string",
            "description": "User's sex"
          },
          "levelActivity": {
            "type": "number",
            "description": "User's levelActivity",
            "enum": [1, 2, 3, 4, 5]
          },
          "caloriesNorm": {
              "type": "number",
              "description": "calculated user's caloriesNorm"
           
            },
            "sportTimeNorm": {
              "type": "number",
              "description": "user's sportTimeNorm"
            },
          "owner": {
              "type": "object",
              "description": "ownerData"
           
            }
          }
        },
        "example": 
          { "_id": "651b0be75d641eec637f664f",
    "name": "string",
    "email": "user1@example.com",
    "height": 180,
    "currentWeight": 100,
    "desiredWeight": 90,
    "birthday": "Sat Dec 23 1989 03:00:00 GMT+0300 (Eastern European Standard Time)",
    "blood": 1,
    "sex": "male",
    "levelActivity": 2,
    "calorieNorm": 3730,
    "sportTimeNorm": 110,
    "owner": "651af8225e51fc81bf7f82cb" 
  }
      },

      "AllCategoriesResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "categories title"
           
            },
           
            "_id": {
              "type": "string",
              "description": "categories id"
            
            }
          },
          "example":
          [
            {
                "_id": "65088f9f9f49463ffe6be760",
                "title": "berries",
                "createdAt": "2023-09-18T17:57:51.883Z",
                "updatedAt": "2023-09-18T17:57:51.883Z"
            },
            {
                "_id": "65088f9f9f49463ffe6be761",
                "title": "cereals",
                "createdAt": "2023-09-18T17:57:51.883Z",
                "updatedAt": "2023-09-18T17:57:51.883Z"
            }
          ]
        }
   
      },
      "ProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupBloodNotAllowed": {
              "type": "object",
              "description": "groupBloodNotAllowed list"
           
            },
           
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            
            },
            "title": {
              "type": "string",
              "description": "title of product"
      
            }
            
          },
          "example":
          [
            {
                "groupBloodNotAllowed": {
                    "1": true,
                    "2": true,
                    "3": false,
                    "4": false
                },
                "_id": "5d51694902b2373622ff5773",
                "weight": 100,
                "calories": 340,
                "category": "dairy",
                "title": "Danbo cheese",
                "recommended": false
            },
            {
                "groupBloodNotAllowed": {
                    "1": false,
                    "2": false,
                    "3": false,
                    "4": false
                },
                "_id": "5d51694902b2373622ff5b7f",
                "weight": 100,
                "calories": 112,
                "category": "fish",
                "title": "marlin",
                "recommended": true
            }
          ]
          
        }
      },
      "FilteredByCategoryProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            
            },
            "title": {
              "type": "string",
              "description": "title of product"
      
            }

            
          }
        }
        
      },
       "FilteredByTilteProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            
            },
            "title": {
              "type": "string",
              "description": "title of product"
      
            } 
          }
        }
      },
      "FilteredByTilteByCategoryProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            
            },
            "title": {
              "type": "string",
              "description": "title of product"
      
            }
            
          }
        }
        
        
      },
      "BloodProhibitedProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupBloodNotAllowed": {
              "type": "object",
              "description": "object of alowed types"
          
        },
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            },
             "category": {
              "type": "string",
              "description": "name of category"
            },
            "title": {
              "type": "string",
              "description": "title of product"
      
            }
            
          }
        }   
      },
      "FilteredByTitleBloodProhibitedProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupBloodNotAllowed": {
              "type": "object",
              "description": "object of alowed types"
          
        },
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            
            },
            "title": {
              "type": "string",
              "description": "title of product"
      
            }
            
          }
        }
        
        
      },
      "FilteredByCategoryBloodProhibitedProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupBloodNotAllowed": {
              "type": "object",
              "description": "object of alowed types"
          
        },
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            },
            "title": {
              "type": "string",
              "description": "title of product"

            }
          }
        }
      },
         "FilteredByCategoryByTitleBloodProhibitedProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupBloodNotAllowed": {
              "type": "object",
              "description": "object of alowed types"
          
        },
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            },
            "title": {
              "type": "string",
              "description": "title of product"

            }
          }
        }
      },
      "BloodAlowedProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupBloodNotAllowed": {
              "type": "object",
              "description": "object of alowed types"
          
        },
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            },
            "title": {
              "type": "string",
              "description": "title of product"

            }
          }
        }
      },
         "FilteredByTitleBloodAlowedProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupBloodNotAllowed": {
              "type": "object",
              "description": "object of alowed types"
          
        },
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            
            },
            "title": {
              "type": "string",
              "description": "title of product"
      
            }
            
          }
        }
        
        
      },
      "FilteredByCategoryBloodAlowedProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupBloodNotAllowed": {
              "type": "object",
              "description": "object of alowed types"
          
        },
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            },
            "title": {
              "type": "string",
              "description": "title of product"

            }
          }
        }
      },
         "FilteredByCategoryByTitleBloodAlowedProductsResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "groupBloodNotAllowed": {
              "type": "object",
              "description": "object of alowed types"
          
        },
            "userId": {
              "type": "number",
              "description": "products id",
              "example": "32143232436545474"
            },
             "weight": {
              "type": "number",
              "description": "weight of product was eaten by user"
              
            },
             "calories": {
              "type": "number",
              "description": "categories amount in product"
            
            },
             "category": {
              "type": "string",
              "description": "name of category"
            },
            "title": {
              "type": "string",
              "description": "title of product"

            }
          }
        }
      },

      "GetExercisesResponse":{
       "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_Id": {
              "type": "string",
              "description": "exercise id",
              "example": "321432s32436f545474"
            },
             "bodyPart": {
              "type": "string",
              "description": "exercise for specific part of body",
              "example": "upper legs"
            },
             "equipment": {
              "type": "string",
              "description": "equipment for exercise",
            "example": "barbell"
            },
             "gifUrl": {
              "type": "string",
              "description": "link for exercise's gif",
              "example": "https://res.cloudinary.com/ditdqzoio/image/upload/v1687127066/exercise…"
            
            },
            "name": {
              "type": "string",
              "description": "description of exercise",
            "example": "barbell clean-grip front squat"
      
            },
            "target": {
              "type": "string",
              "description": "target of exercise",
            "example": "glutes"
            },
            "burnedCalories": {
              "type": "integer",
              "description": "burnedCalories for exercise during seted time",
            "example": 220
            },
            "time": {
              "type": "integer",
              "description": "time of exercise",
            "example": 3
            }

            
          }
        }
      },
     "User'sExerciseRequest": {
        "type": "object",
        "required": ["exercise_id","date", "duration_minutes","calories_burned"],
        "properties": {
          "exercise": {
            "type": "string",
            "description": "exercise_id"
          },
          "date": {
            "type": "string",
            "description": "exersices date",
            "format": "date"
          },
          "time": {
            "type": "integer",
            "description": "exersices duration"
           
          },
          "calories": {
            "type": "integer",
            "description": "amount of burned calories"

          }
        },
        "example": 
          { "exercise": "6512b57892792387ef9e1036",
            "date": "23-08-2023",
            "time": 20,
            "calories": 1500 
          }
      },
       
      
      "User'sExerciseResponse": {
          "type": "object",
          "properties": {
             "_id":{
            "type": "string",
            "description": "exercise original id"
          },
          "exercise": {
            "type": "string",
            "description": "exercise_id"
          },
           "name": {
            "type": "string",
            "description": "exercise name"
          },
           "bodyPart": {
            "type": "string",
            "description": "exercise for bodyPart"
          },
           "gifUrl": {
            "type": "string",
            "description": "exercise's gif"
          },
          "owner": {
              "type": "object",
              "description": "ownerData"
           
            }, "time": {
            "type": "integer",
            "description": "exersices duration"
           
          },"calories": {
            "type": "integer",
            "description": "amount of burned calories"
          },
          "date": {
            "type": "string",
            "description": "exersices date",
            "format": "date"
          }
            
        },
        "example": 
          { 
                "exercise": "6512b57892792387ef9e1036",
                "name": "45° side bend",
                "bodyPart": "waist",
                "gifUrl": "https://res.cloudinary.com/dw1ybwpgb/image/upload/v1695659838/exercises/0002.gif",
                "owner": "651e383c11313d0c8c36fe42",
                "time": 6,
                "calories": 500,
                "date": "2023-08-23T00:00:00.000Z",
                "_id": "651e4240b209a1d4b4a6e8ef",
                "createdAt": "2023-10-05T04:57:36.444Z",
                "updatedAt": "2023-10-05T04:57:36.444Z" }
       
      },
      "User'sDelExerciseRequest":{
        "type": "object",
        "required": [ "id","date"],
        "properties": {
          
          "id": {
            "type": "string",
            "description": "exersice id"
           
          },
          "date": {
            "type": "date",
            "description": "exercise's date"

          }
        },
        "example": 
          { "id": "6512b57892792387ef9e1036", "date": "23-08-2023"}
      },
      "UserUpdateExerciseRequest":{
          "type": "object",
        "required": [ "duration_minutes","calories_burned"],
        "properties": {
          
          "time": {
            "type": "integer",
            "description": "exersices duration"
           
          },
          "calories": {
            "type": "integer",
            "description": "amount of burned calories"
          }
        },
        "example": 
          { "time": 25, "calories": 2000 }
      },
       "AllFiltersResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "filter's id"
            
            },
            "filter": {
              "type": "string",
              "description": "filters category"
           
            },
            "name": {
              "type": "string",
              "description": "searched query"
           
            },
            "imgURL": {
              "type": "string",
              "description": "link for image of searched query"
           
            }
          },
          "example":
          [
            {
                "_id": "6512900592792387ef9e0add",
                "filter": "Equipment",
                "name": "skierg machine",
                "imgURL": "https://res.cloudinary.com/dn4iogcf4/image/upload/v1694469567/categories/skierg_machine_sfkvol.jpg"
            },
            {
                "_id": "6512900592792387ef9e0ac2",
                "filter": "Body parts",
                "name": "back",
                "imgURL": "https://res.cloudinary.com/dn4iogcf4/image/upload/v1694469563/categories/back_wzzphw.jpg"
            }
          ]
        }
   
      },
             "GetFilteredDataResponse":{
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "filter's id"
            
            },
            "filter": {
              "type": "string",
              "description": "filters category"
           
            },
            "name": {
              "type": "string",
              "description": "searched query"
           
            },
            "imgURL": {
              "type": "string",
              "description": "link for image of searched query"
           
            }
          },
          "example":
          [
            {
                "_id": "6512900592792387ef9e0add",
                "filter": "Equipment",
                "name": "skierg machine",
                "imgURL": "https://res.cloudinary.com/dn4iogcf4/image/upload/v1694469567/categories/skierg_machine_sfkvol.jpg"
            },
            {
                "_id": "6512900592792387ef9e0acd",
                "filter": "Equipment",
                "name": "band",
                "imgURL": "https://res.cloudinary.com/dn4iogcf4/image/upload/v1694469572/categories/band_ri4mww.jpg"
            }
          ]
        }
      },
      "Request": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
         
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty12"
          }
        }
      },
      "Response": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name"
           
            },
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email"
            },
            "userId": {
              "type": "number",
              "description": "User's id",
              "example": "32143232436545474"
            }
          }
        },
        "example": 
          { "name": "VictorD", "email": "1@gmail.com", "userId": "1" }
      }
    },
    
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}